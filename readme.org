#+TITLE: HETI Stack Simulator - An Experimental Report
#+SUBTITLE: stack_sim.py
#+AUTHOR: Christopher Chen
#+DATE: 2020-04-28
#+OPTIONS: ^:nil toc:4
* Introduction
- Disclaimer: there is NO guarantee that any of this is accurate. It
  is only based on hearsay about how the stack algorithm works
- Nonetheless, let's try to find out what the best strategy is for
  ordering your hospital preferences
* The algorithm
** HETI's 2021 algorithm
- HETI uses an approach called "[[https://en.wikipedia.org/wiki/Simulated_annealing][simulated annealing]]"
- It's an algorithm commonly used in AI that tries to find the global
  minimum (or maximum) of a function
  - The name comes from the idea that if you freeze a hot liquid
    quickly it won't form nice crystals, but if you do it slowly it
    will because the particles are more likely to find the lowest
    energy (lattice) state.
  - Likewise, when our system is "hot" it is more likely to jump over
    "energy barriers" (i.e. make decisions that initially appear unfavourable
    but might lead to less overall unhappiness on the other
    side). The slower we cool it, the more likely our system is to
    find the global minimum.
- It starts by randomly allocating people per category
  - All category 1 applicants are matched to a random hospital.
  - Anyone below will have this process applied to them:
    - If there are more applicants than spots, HETI's server
      randomises the list of applicants and takes from the top however
      many would fill the remaining spots.
- Now for the fancy AI part
  - At this point, everyone who is in a hospital will have a certain
    "unhappiness score" calculated from what position the hospital they got
    was in their preferences list minus 1 (so, zero if you got your favourite).
  - The algorithm will try swapping two people. If it results in a net
    increase in happiness and doesn't overload hospital capacity, the swap
    is more likely to be followed through with. If not, nothing happens.
  - The algorithm keeps doing this for a large number of iterations.
- Henceforth for brevity this method will be referred to as the "AI algorithm"
** Other conceptions
- Categorical allocation has also been previously understood as the method for allocation.
- This basically involves allocating people first by category, then according
  to preference. The last iteration of this article was based on this conception.
* Implementation
- These scenarios were tested:
  1. Everybody preferences hospitals entirely randomly
  2. Everybody stacks
  3. Everybody stacks but moves a random hospital of their choice to
     first place
  4. Everybody stacks but moves random hospitals of their choice to
     1st and 12th places
  5. Everybody stacks but moves random hospitals of their choice to
     1st and 14th places
  6. Everybody stacks but moves random hospitals of their choice to
     1st and 2nd places
- Incomplete list of deviations from reality, simplifications and
  assumptions:
  1. With unweighted randomness, it is assumed that no hospital is
     more favourable than another.
  2. With weighted randomness, hospital favourability at all levels is
     assumed to be similar to that at the first preference. That is,
     the probability-weight of a simulated applicant selecting each
     hospital is correlated with their popularity based on last year's
     survey.
  3. Everybody has the same stack.
  4. Everyone who applies accepts the first job offer they get.
  5. DRA and other pathways that cannot be considered part of the
     optimised allocation algorithm have not been accounted for in
     running the simulation. However, parts of it are included as options
     in the code if you want to try it yourself.
  6. Only 1 round of offers is simulated. Rejections are not accounted for.
  7. Corollary from 4-6: Category 1 applicants are basically guaranteed
     a job.
  8. Corollary from 7: Anyone category 3 or below will not get a job.
  9. [from a reader] IRL, category 2 placements and beyond tend to be based
     more on luck of the draw (offer timing, rounds, category 1
     rejections).
  10. Corollary from 8,9: in terms of informing you as to what to do,
      this simulation is basically worthless for anyone outside of
      category 1, and maybe 2.
- For nerds: the actual code of this simulation is on
  [[https://github.com/newageoflight/stack_sim/blob/master/stack_sim.py][Github]]. Parameters used in the simulation:
  | Parameter |  Value |
  |-----------+--------|
  | \alpha    | 0.0002 |
  | T         |  10000 |
* Results
How to read the tables:
- nth :: Number of applicants that got their nth preference
- catn :: Category n applicants
- placed :: Applicants who matched into any hospital
- not_placed :: Applicants who did not match into any hospital
** AI algorithm + weighted random selection
*** Weighted random
[[./images/weighted_random_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   162 |  152 |   10 |    0 |    0 |    0 |    0 |
| 2nd        |   160 |  139 |   21 |    0 |    0 |    0 |    0 |
| 3rd        |   130 |  126 |    4 |    0 |    0 |    0 |    0 |
| 4th        |   107 |   95 |   12 |    0 |    0 |    0 |    0 |
| 5th        |    95 |   88 |    7 |    0 |    0 |    0 |    0 |
| 6th        |    79 |   71 |    8 |    0 |    0 |    0 |    0 |
| 7th        |    57 |   51 |    6 |    0 |    0 |    0 |    0 |
| 8th        |    56 |   52 |    4 |    0 |    0 |    0 |    0 |
| 9th        |    39 |   36 |    3 |    0 |    0 |    0 |    0 |
| 10th       |    33 |   26 |    7 |    0 |    0 |    0 |    0 |
| 11th       |    26 |   23 |    3 |    0 |    0 |    0 |    0 |
| 12th       |    24 |   21 |    3 |    0 |    0 |    0 |    0 |
| 13th       |    20 |   20 |    0 |    0 |    0 |    0 |    0 |
| 14th       |    17 |   16 |    1 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |  1005 |  916 |   89 |    0 |    0 |    0 |    0 |
| not_placed |   534 |    0 |  113 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/weighted_random_anneal_satisfied_total.png]]
**** Category 1
[[./images/weighted_random_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/weighted_random_anneal_satisfied_cat2.png]]
*** All stack
[[./images/all_stack_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |    64 |   54 |   10 |    0 |    0 |    0 |    0 |
| 2nd        |    71 |   69 |    2 |    0 |    0 |    0 |    0 |
| 3rd        |    51 |   45 |    6 |    0 |    0 |    0 |    0 |
| 4th        |    54 |   50 |    4 |    0 |    0 |    0 |    0 |
| 5th        |    49 |   47 |    2 |    0 |    0 |    0 |    0 |
| 6th        |    76 |   67 |    9 |    0 |    0 |    0 |    0 |
| 7th        |   121 |  114 |    7 |    0 |    0 |    0 |    0 |
| 8th        |    40 |   34 |    6 |    0 |    0 |    0 |    0 |
| 9th        |   125 |  110 |   15 |    0 |    0 |    0 |    0 |
| 10th       |    74 |   66 |    8 |    0 |    0 |    0 |    0 |
| 11th       |    51 |   48 |    3 |    0 |    0 |    0 |    0 |
| 12th       |    68 |   63 |    5 |    0 |    0 |    0 |    0 |
| 13th       |    66 |   62 |    4 |    0 |    0 |    0 |    0 |
| 14th       |    63 |   62 |    1 |    0 |    0 |    0 |    0 |
| 15th       |    28 |   25 |    3 |    0 |    0 |    0 |    0 |
| placed     |  1001 |  916 |   85 |    0 |    0 |    0 |    0 |
| not_placed |   538 |    0 |  117 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_anneal_satisfied_cat2.png]]
*** All stack with weighted random first
[[./images/all_stack_with_weighted_random_first_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   192 |  179 |   13 |    0 |    0 |    0 |    0 |
| 2nd        |    64 |   60 |    4 |    0 |    0 |    0 |    0 |
| 3rd        |    55 |   51 |    4 |    0 |    0 |    0 |    0 |
| 4th        |    53 |   48 |    5 |    0 |    0 |    0 |    0 |
| 5th        |    68 |   59 |    9 |    0 |    0 |    0 |    0 |
| 6th        |    49 |   47 |    2 |    0 |    0 |    0 |    0 |
| 7th        |    51 |   44 |    7 |    0 |    0 |    0 |    0 |
| 8th        |    64 |   52 |   12 |    0 |    0 |    0 |    0 |
| 9th        |    49 |   46 |    3 |    0 |    0 |    0 |    0 |
| 10th       |    39 |   35 |    4 |    0 |    0 |    0 |    0 |
| 11th       |    60 |   57 |    3 |    0 |    0 |    0 |    0 |
| 12th       |    92 |   87 |    5 |    0 |    0 |    0 |    0 |
| 13th       |    85 |   82 |    3 |    0 |    0 |    0 |    0 |
| 14th       |    56 |   51 |    5 |    0 |    0 |    0 |    0 |
| 15th       |    20 |   18 |    2 |    0 |    0 |    0 |    0 |
| placed     |   997 |  916 |   81 |    0 |    0 |    0 |    0 |
| not_placed |   542 |    0 |  121 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_weighted_random_first_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_weighted_random_first_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_weighted_random_first_anneal_satisfied_cat2.png]]
*** All stack with weighted random first and 14th
[[./images/all_stack_with_weighted_random_first_and_14th_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   165 |  155 |   10 |    0 |    0 |    0 |    0 |
| 2nd        |    61 |   59 |    2 |    0 |    0 |    0 |    0 |
| 3rd        |    54 |   48 |    6 |    0 |    0 |    0 |    0 |
| 4th        |    63 |   55 |    8 |    0 |    0 |    0 |    0 |
| 5th        |    71 |   64 |    7 |    0 |    0 |    0 |    0 |
| 6th        |    63 |   61 |    2 |    0 |    0 |    0 |    0 |
| 7th        |    60 |   57 |    3 |    0 |    0 |    0 |    0 |
| 8th        |    61 |   56 |    5 |    0 |    0 |    0 |    0 |
| 9th        |    54 |   51 |    3 |    0 |    0 |    0 |    0 |
| 10th       |    56 |   49 |    7 |    0 |    0 |    0 |    0 |
| 11th       |   100 |   93 |    7 |    0 |    0 |    0 |    0 |
| 12th       |    99 |   90 |    9 |    0 |    0 |    0 |    0 |
| 13th       |    57 |   49 |    8 |    0 |    0 |    0 |    0 |
| 14th       |    10 |    9 |    1 |    0 |    0 |    0 |    0 |
| 15th       |    21 |   20 |    1 |    0 |    0 |    0 |    0 |
| placed     |   995 |  916 |   79 |    0 |    0 |    0 |    0 |
| not_placed |   544 |    0 |  123 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_weighted_random_first_and_14th_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_weighted_random_first_and_14th_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_weighted_random_first_and_14th_anneal_satisfied_cat2.png]]
*** All stack with weighted random first and 12th
[[./images/all_stack_with_weighted_random_first_and_12th_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   180 |  170 |   10 |    0 |    0 |    0 |    0 |
| 2nd        |    58 |   56 |    2 |    0 |    0 |    0 |    0 |
| 3rd        |    55 |   49 |    6 |    0 |    0 |    0 |    0 |
| 4th        |    59 |   54 |    5 |    0 |    0 |    0 |    0 |
| 5th        |    63 |   58 |    5 |    0 |    0 |    0 |    0 |
| 6th        |    56 |   50 |    6 |    0 |    0 |    0 |    0 |
| 7th        |    58 |   49 |    9 |    0 |    0 |    0 |    0 |
| 8th        |    59 |   55 |    4 |    0 |    0 |    0 |    0 |
| 9th        |    41 |   36 |    5 |    0 |    0 |    0 |    0 |
| 10th       |    62 |   57 |    5 |    0 |    0 |    0 |    0 |
| 11th       |   108 |   98 |   10 |    0 |    0 |    0 |    0 |
| 12th       |    34 |   33 |    1 |    0 |    0 |    0 |    0 |
| 13th       |    89 |   80 |    9 |    0 |    0 |    0 |    0 |
| 14th       |    53 |   47 |    6 |    0 |    0 |    0 |    0 |
| 15th       |    25 |   24 |    1 |    0 |    0 |    0 |    0 |
| placed     |  1000 |  916 |   84 |    0 |    0 |    0 |    0 |
| not_placed |   539 |    0 |  118 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_weighted_random_first_and_12th_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_weighted_random_first_and_12th_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_weighted_random_first_and_12th_anneal_satisfied_cat2.png]]
*** All stack with weighted random first and 2nd
[[./images/all_stack_with_weighted_random_first_and_2nd_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   177 |  164 |   13 |    0 |    0 |    0 |    0 |
| 2nd        |   181 |  164 |   17 |    0 |    0 |    0 |    0 |
| 3rd        |    55 |   54 |    1 |    0 |    0 |    0 |    0 |
| 4th        |    56 |   50 |    6 |    0 |    0 |    0 |    0 |
| 5th        |    54 |   48 |    6 |    0 |    0 |    0 |    0 |
| 6th        |    54 |   48 |    6 |    0 |    0 |    0 |    0 |
| 7th        |    51 |   48 |    3 |    0 |    0 |    0 |    0 |
| 8th        |    49 |   45 |    4 |    0 |    0 |    0 |    0 |
| 9th        |    37 |   34 |    3 |    0 |    0 |    0 |    0 |
| 10th       |    35 |   32 |    3 |    0 |    0 |    0 |    0 |
| 11th       |    46 |   43 |    3 |    0 |    0 |    0 |    0 |
| 12th       |    85 |   76 |    9 |    0 |    0 |    0 |    0 |
| 13th       |    54 |   50 |    4 |    0 |    0 |    0 |    0 |
| 14th       |    41 |   37 |    4 |    0 |    0 |    0 |    0 |
| 15th       |    25 |   23 |    2 |    0 |    0 |    0 |    0 |
| placed     |  1000 |  916 |   84 |    0 |    0 |    0 |    0 |
| not_placed |   539 |    0 |  118 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_weighted_random_first_and_2nd_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_weighted_random_first_and_2nd_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_weighted_random_first_and_2nd_anneal_satisfied_cat2.png]]
** AI algorithm + unweighted random selection
*** All random
[[./images/all_random_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   669 |  607 |   62 |    0 |    0 |    0 |    0 |
| 2nd        |   224 |  206 |   18 |    0 |    0 |    0 |    0 |
| 3rd        |    87 |   80 |    7 |    0 |    0 |    0 |    0 |
| 4th        |    20 |   20 |    0 |    0 |    0 |    0 |    0 |
| 5th        |     2 |    2 |    0 |    0 |    0 |    0 |    0 |
| 6th        |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 7th        |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 8th        |     1 |    1 |    0 |    0 |    0 |    0 |    0 |
| 9th        |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 10th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 11th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 12th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 13th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 14th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |  1003 |  916 |   87 |    0 |    0 |    0 |    0 |
| not_placed |   536 |    0 |  115 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_random_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_random_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_random_anneal_satisfied_cat2.png]]
*** All stack
See [[*All stack][previous section]].
*** All stack with random first
[[./images/all_stack_with_random_first_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   374 |  347 |   27 |    0 |    0 |    0 |    0 |
| 2nd        |    67 |   62 |    5 |    0 |    0 |    0 |    0 |
| 3rd        |    47 |   42 |    5 |    0 |    0 |    0 |    0 |
| 4th        |    49 |   43 |    6 |    0 |    0 |    0 |    0 |
| 5th        |    67 |   60 |    7 |    0 |    0 |    0 |    0 |
| 6th        |    50 |   43 |    7 |    0 |    0 |    0 |    0 |
| 7th        |    41 |   40 |    1 |    0 |    0 |    0 |    0 |
| 8th        |    71 |   65 |    6 |    0 |    0 |    0 |    0 |
| 9th        |    37 |   34 |    3 |    0 |    0 |    0 |    0 |
| 10th       |    34 |   30 |    4 |    0 |    0 |    0 |    0 |
| 11th       |    48 |   43 |    5 |    0 |    0 |    0 |    0 |
| 12th       |    75 |   71 |    4 |    0 |    0 |    0 |    0 |
| 13th       |    38 |   35 |    3 |    0 |    0 |    0 |    0 |
| 14th       |     2 |    1 |    1 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |  1000 |  916 |   84 |    0 |    0 |    0 |    0 |
| not_placed |   539 |    0 |  118 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_random_first_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_random_first_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_random_first_anneal_satisfied_cat2.png]]
*** All stack with random first and 12th
[[./images/all_stack_with_random_first_and_12th_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   348 |  319 |   29 |    0 |    0 |    0 |    0 |
| 2nd        |    69 |   64 |    5 |    0 |    0 |    0 |    0 |
| 3rd        |    50 |   40 |   10 |    0 |    0 |    0 |    0 |
| 4th        |    66 |   60 |    6 |    0 |    0 |    0 |    0 |
| 5th        |    58 |   54 |    4 |    0 |    0 |    0 |    0 |
| 6th        |    51 |   49 |    2 |    0 |    0 |    0 |    0 |
| 7th        |    70 |   63 |    7 |    0 |    0 |    0 |    0 |
| 8th        |    50 |   45 |    5 |    0 |    0 |    0 |    0 |
| 9th        |    40 |   40 |    0 |    0 |    0 |    0 |    0 |
| 10th       |    49 |   45 |    4 |    0 |    0 |    0 |    0 |
| 11th       |    94 |   85 |    9 |    0 |    0 |    0 |    0 |
| 12th       |    26 |   24 |    2 |    0 |    0 |    0 |    0 |
| 13th       |    28 |   28 |    0 |    0 |    0 |    0 |    0 |
| 14th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 15th       |     1 |    0 |    1 |    0 |    0 |    0 |    0 |
| placed     |  1000 |  916 |   84 |    0 |    0 |    0 |    0 |
| not_placed |   539 |    0 |  118 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_random_first_and_12th_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_random_first_and_12th_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_random_first_and_12th_anneal_satisfied_cat2.png]]
*** All stack with random first and 14th
[[./images/all_stack_with_random_first_and_14th_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   367 |  334 |   33 |    0 |    0 |    0 |    0 |
| 2nd        |    67 |   62 |    5 |    0 |    0 |    0 |    0 |
| 3rd        |    61 |   57 |    4 |    0 |    0 |    0 |    0 |
| 4th        |    55 |   49 |    6 |    0 |    0 |    0 |    0 |
| 5th        |    67 |   62 |    5 |    0 |    0 |    0 |    0 |
| 6th        |    52 |   46 |    6 |    0 |    0 |    0 |    0 |
| 7th        |    59 |   56 |    3 |    0 |    0 |    0 |    0 |
| 8th        |    58 |   55 |    3 |    0 |    0 |    0 |    0 |
| 9th        |    42 |   35 |    7 |    0 |    0 |    0 |    0 |
| 10th       |    46 |   45 |    1 |    0 |    0 |    0 |    0 |
| 11th       |    73 |   69 |    4 |    0 |    0 |    0 |    0 |
| 12th       |    41 |   36 |    5 |    0 |    0 |    0 |    0 |
| 13th       |    11 |   10 |    1 |    0 |    0 |    0 |    0 |
| 14th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |   999 |  916 |   83 |    0 |    0 |    0 |    0 |
| not_placed |   540 |    0 |  119 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_random_first_and_14th_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_random_first_and_14th_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_random_first_and_14th_anneal_satisfied_cat2.png]]
*** All stack with random first and 2nd
[[./images/all_stack_with_random_first_and_2nd_anneal_satisfied.png]]

|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   425 |  381 |   44 |    0 |    0 |    0 |    0 |
| 2nd        |   283 |  263 |   20 |    0 |    0 |    0 |    0 |
| 3rd        |    54 |   52 |    2 |    0 |    0 |    0 |    0 |
| 4th        |    49 |   47 |    2 |    0 |    0 |    0 |    0 |
| 5th        |    43 |   41 |    2 |    0 |    0 |    0 |    0 |
| 6th        |    44 |   40 |    4 |    0 |    0 |    0 |    0 |
| 7th        |    24 |   22 |    2 |    0 |    0 |    0 |    0 |
| 8th        |    27 |   27 |    0 |    0 |    0 |    0 |    0 |
| 9th        |    14 |   13 |    1 |    0 |    0 |    0 |    0 |
| 10th       |    20 |   18 |    2 |    0 |    0 |    0 |    0 |
| 11th       |     5 |    5 |    0 |    0 |    0 |    0 |    0 |
| 12th       |     7 |    7 |    0 |    0 |    0 |    0 |    0 |
| 13th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 14th       |     1 |    0 |    1 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |   996 |  916 |   80 |    0 |    0 |    0 |    0 |
| not_placed |   543 |    0 |  122 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |

**** Total
[[./images/all_stack_with_random_first_and_2nd_anneal_satisfied_total.png]]
**** Category 1
[[./images/all_stack_with_random_first_and_2nd_anneal_satisfied_cat1.png]]
**** Category 2
[[./images/all_stack_with_random_first_and_2nd_anneal_satisfied_cat2.png]]
** AI algorithm convergence
The algorithm converges on the minimum global unhappiness fastest when
everyone stacks, slowest when everyone selects a weighted-random preference
list. The rapidity of convergence seems to show that HETI's claim of
"millions of iterations" could indicate a waste of electrical power or
simply bad programming. However, I could be wrong on both fronts too.

How to read the legend:
- min_unhappiness :: Minimum possible global unhappiness determined so far
- current_unhappiness :: Global unhappiness of the current iteration
*** Everyone is unweighted random
[[./images/conv_all_random_anneal.png]]
*** Everyone is weighted random
[[./images/conv_weighted_random_anneal.png]]
*** Everyone stacks
[[./images/conv_all_stack_anneal.png]]
*** Everyone stacks with an unweighted random first
[[./images/conv_all_stack_with_random_first_anneal.png]]
*** Everyone stacks with a weighted random first
[[./images/conv_all_stack_with_weighted_random_first_anneal.png]]
*** Everyone stacks with an unweighted random first and 12th
[[./images/conv_all_stack_with_random_first_and_12th_anneal.png]]
*** Everyone stacks with a weighted random first and 12th
[[./images/conv_all_stack_with_weighted_random_first_and_12th_anneal.png]]
*** Everyone stacks with an unweighted random first and 14th
[[./images/conv_all_stack_with_random_first_and_14th_anneal.png]]
*** Everyone stacks with a weighted random first and 14th
[[./images/conv_all_stack_with_weighted_random_first_and_14th_anneal.png]]
** Global unhappiness when compared to categorical matching
The AI algorithm does not appear to always lead to an improved
reduction in global/total unhappiness when compared to categorical
matching. However I didn't simulate for millions of iterations like
HETI claims to. Calling on anyone with a fancy graphics card (or even
a cryptocurrency mining rig) to try it out though. Bonus points if you
can fix my code to implement CUDA optimisation.

| Allocation mode                               | Global unhappiness - annealing | Global unhappiness - categorical |
|-----------------------------------------------+--------------------------------+----------------------------------|
| All random                                    |                          *473* | 1123                             |
| Weighted random                               |                           3844 | *2100*                           |
| All stack                                     |                         *6844* | 7208                             |
| All stack with random first                   |                           3958 | *3338*                           |
| All stack with weighted random first          |                           5987 | *3617*                           |
| All stack with random first and 12th          |                           3961 | *3454*                           |
| All stack with weighted random first and 12th |                           6085 | *3710*                           |
| All stack with random first and 14th          |                           3705 | *3371*                           |
| All stack with weighted random first and 14th |                           5877 | *3887*                           |
| All stack with random first and 2nd           |                         *1695* | 2474                             |
| All stack with weighted random first and 2nd  |                           5131 | *3486*                           |
* Discussion
- In short, under each strategy, with weighting for random choices:
  1. All random
     - Gradual gradation of ranks from top to bottom
     - Nobody actually selects like this IRL (unless you're a weirdo)
  2. All stack
     - It's basically communism for internships.
     - You have a near-equal chance at landing just about every
       hospital.
  3. All stack but put a random on top
     - Interestingly, you're most likely to get (in order) your first
       or 12th preference.
     - Otherwise it can be considered a sort of Stack Plus, where you
       basically have a greater chance of getting your favourite but a
       similar chance at the rest.
     - This appears to be most consistent with the strategy people use
       IRL and possibly the best.
  4. All stack but put a random at 1 and 14, 1 and 12
     - Don't do this. It hurts your chances of getting whatever
       position you decide to randomise, and your chances of getting
       your first preference.
  5. All stack but put a random at 1 and 2
     - Interestingly this gives you an equally good chance of getting
       either your first or second preference.
- Key differences from a categorical allocation method:
  - Wherever the stack is used, the near-equal chances of getting
    every hospital after your first (two) is preserved
  - If everyone selects randomly, less people get their first
    preference.
  - Strategy 3 perhaps represents the best idea - you are most likely
    to get your best, but otherwise you get an equal chance of getting
    everything else.
- Counterintuitively, simulated annealing does not always result in a
  net increase in happiness, when compared to a categorical allocation
  approach.
- The necessity of "millions of iterations" as claimed in HETI's
  policy document is questionable because in all of these instances
  the minimum unhappiness is reached within tens to hundreds
  of thousands of iterations.
- Regarding common rumours:
  - "The last 4 are the most important" - under this algorithm this is
    no longer true. If the matching system was categorical, it would
    be.
  - "Stacking hurts your chances of getting to preferences 1-6"
    (HETI, 2020) - true to some extent insofar as less people get to
    higher preferences. The true advantage herein is that the chance
    of getting to a hospital now becomes proportional to the number of
    vacancies.
* Limitations
- Assumptions and deviations from reality have been addressed under
  [[*Implementation][Implementation]].
  - Regarding DRA: it is possible to factor DRA into this model. The
    [[https://github.com/newageoflight/stack_sim/stack_aux.py][source files]] now include DRA counts from last year and include
    those values in =Hospital.__init__()=. Feel free to tinker around
    with the source code if you want to account for DRA, I just cbf to
    implement it atm. But basically the schema for the algorithm, as
    outlined in the 2019 Annual Report[fn:2] is this (doesn't really
    say what to do about the other categories):
#+BEGIN_SRC python
if cat1.count <= dra.spots:
	dra.spots.allocate(cat1)
else:
	dra.spots.allocate(random.select(cat1, dra.spots.count))
# ???how to account for other categories???
#+END_SRC
- The exact parameters of the annealing process can affect the end
  result. Which ones HETI plans to use are unknown to us.
* What should you do?
- Depends on what you want
- There is not enough data to draw any definitive conclusions on what
  the "best" strategy is, especially since a lot of simplifications
  were made to run this model
  - Strategy 3 gives you the best chance of getting your first
    preference. IRL it may break down for category 1 hospitals (RPA,
    RNS, POW, StV), but more data is needed to say for sure.
  - Strategy 2 is best if you don't care where you will end up, but
    given that IRL it is mostly a mix between strategies 2 and 3, this
    might not lead to the same result as in the simulation.
  - Can't decide between two favourites? Try strategy 6 (random at 1
    and 2).
  - The AI appears to do the best job of maximising global happiness
    when everyone preferences entirely randomly, with no regard for
    hospital popularity.
- Fork me, submit a pull request or an issue on [[https://github.com/newageoflight/stack_sim][Github]] to help me
  improve the simulation so future generations can know what to do
  with greater accuracy. There's probably a lot of higher-level
  math/CS knowledge that could be applied here that I don't know about.
* TODO Future directions/todos
- [ ] Significance analysis of results
- [ ] Further strategic analysis
- [ ] Fix the algorithm so it's more consistent with the real data
- [ ] Implement more scenarios e.g. some people stack, some people
  random
- [ ] Implement random Category 1 rejections and multiple rounds of
  offers so this simulation actually becomes useful for Categories 2-6
- [ ] More data is needed to make this more accurate e.g. how many
  people preference each hospital in what order every year?
- [ ] Is there any way to beat the algorithm beyond simply stacking
  e.g. preferencing at 1st and 14th, 1st and 12th, etc? If so, why
  does it work?
- [ ] GPU optimisation of simulated annealing so we can run HETI's
  "millions of iterations" at home
* Sources
- AMSA Internship Guide[fn:1] and HETI's Annual Report[fn:2]
- HETI's 2021 procedure[fn:3] (thanks Chris Chiu)
- 2019 Student Survey (available on my Github)
* Footnotes

[fn:3] https://www.heti.nsw.gov.au/__data/assets/pdf_file/0011/576470/Optimised-Allocation-Pathway-Procedure-for-2021-Clinical-Year.pdf 

[fn:2] https://www.heti.nsw.gov.au/__data/assets/pdf_file/0019/485002/Annual-Report-for-Medical-Graduate-Recruitment-for-the-2019-Clinical-Year.PDF 

[fn:1] https://www.amsa.org.au/sites/amsa.org.au/files/Internship%20Guide%202019%20Final.pdf

