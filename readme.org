#+TITLE: HETI Stack Simulator - An Experimental Report
#+SUBTITLE: stack_sim.py
#+AUTHOR: Christopher Chen
#+DATE: 2020-04-28
#+OPTIONS: ^:nil toc:3 html5-fancy:t
* Introduction
- Disclaimer: there is NO guarantee that any of this is accurate. It
  is only based on hearsay about how the stack algorithm works
- Nonetheless, let's try to find out what the best strategy is for
  ordering your hospital preferences
* The algorithm
** The oversimplified version
- The algorithm first looks at category
- Then allocates people of that category to each hospital by how
  they ranked their preferred hospitals
- It fills spots in each hospital by selecting from people who
  preferenced that hospital, in descending order of rank (e.g. 1st
  pref, then 2nd, etc.)
  - If there are more applicants who ranked that hospital (nth) than
    there are spots, it will randomly select just enough people from
    that group so all spots are filled
  - If the number of applicants is less than or equal to the
    number of spots, the hospital will take all of the applicants
    who ranked that hospital (nth)
- For nerds: pseudocode representation of the algorithm
#+BEGIN_SRC python
for category in categories:
  for hospital in hospitals:
    for rank in range(length(hospitals)):
      preferenced_this = filter(lambda a: a.preferences[rank] == hospital and a.category == category, unallocated_applicants)
      hospital.fill(min(preferenced_this, random.select(preferenced_this, hospital.capacity)))
#+END_SRC
** What HETI uses now
- HETI uses an approach called "simulated annealing"
- It's an algorithm commonly used in AI that tries to find the global
  minimum of a function
  - The name comes from the idea that if you freeze a hot liquid
    quickly it won't form nice crystals, but if you do it slowly it
    will. I didn't do physics so don't ask me anything about this.
  - But in our case it's essentially a brute force algorithm that
    tries to find the global minimum of a function
- It starts by allocating people from each category
  - Category 1's will all get a job, as usual
  - Anyone below will have this process applied to them:
    - If there are more applicants than spots, HETI's server
      randomises the list of applicants and takes from the top however
      many would fill the remaining spots
- Now for the fancy AI part
  - So basically, everyone will start in a random hospital
  - The algorithm will try swapping two people. If it results in a net
    increase in happiness, the swap is followed through with. If not,
    nothing happens.
  - The algorithm keeps doing this for a large number of iterations.
* Implementation
- 4 possible scenarios were tested:
  1. Everybody preferences hospitals entirely randomly
  2. Everybody stacks
  3. Everybody stacks but moves a random hospital of their choice to
     first place
- Incomplete list of deviations from reality, simplifications and
  assumptions:
  1. With weighted randomness, hospital favourability at all levels is
     assumed to be similar to that at the first preference.
  2. Everybody has the same stack (for simulation 2 and 3).
  3. Everyone who applies accepts the first job offer they get.
  4. DRA and other pathways that cannot be considered part of the
     optimised allocation algorithm have not been accounted for in
     running the simulation. However, parts of it are in the code if
     you want to write it in yourself.
  5. Only 1 round of offers is simulated. Rejections are not accounted for.
  6. Corollary from 3-5: Category 1 applicants are basically guaranteed
     a job.
  7. Corollary from 6: Anyone category 3 or below will not get a job.
  8. [from a reader] IRL, category 2 placements and beyond tend to be based
     more on luck of the draw (offer timing, rounds, category 1
     rejections).
  9. Corollary from 7,8: in terms of informing you as to what to do,
     this simulation is basically worthless for anyone outside of
     category 1, and maybe 2.
- For nerds: the actual code of this simulation is on [[https://github.com/newageoflight/stack_sim/blob/master/stack_sim.py][Github]].
* Results
How to read the tables:
- nth :: Number of applicants that got their nth preference
- catn :: Category n applicants
- placed :: Applicants who matched into any hospital
- not_placed :: Applicants who did not match into any hospital
** AI algorithm + weighted random selection
*** Everyone is random
 [[./images/weighted_random_anneal_satisfied.png]]
|            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
|------------+-------+------+------+------+------+------+------|
| 1st        |   293 |  263 |   30 |    0 |    0 |    0 |    0 |
| 2nd        |   222 |  207 |   15 |    0 |    0 |    0 |    0 |
| 3rd        |   169 |  156 |   13 |    0 |    0 |    0 |    0 |
| 4th        |   127 |  118 |    9 |    0 |    0 |    0 |    0 |
| 5th        |    72 |   65 |    7 |    0 |    0 |    0 |    0 |
| 6th        |    55 |   50 |    5 |    0 |    0 |    0 |    0 |
| 7th        |    23 |   21 |    2 |    0 |    0 |    0 |    0 |
| 8th        |    20 |   18 |    2 |    0 |    0 |    0 |    0 |
| 9th        |     9 |    8 |    1 |    0 |    0 |    0 |    0 |
| 10th       |     6 |    6 |    0 |    0 |    0 |    0 |    0 |
| 11st       |     3 |    2 |    1 |    0 |    0 |    0 |    0 |
| 12nd       |     1 |    1 |    0 |    0 |    0 |    0 |    0 |
| 13rd       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| 14th       |     1 |    1 |    0 |    0 |    0 |    0 |    0 |
| 15th       |     0 |    0 |    0 |    0 |    0 |    0 |    0 |
| placed     |  1001 |  916 |   85 |    0 |    0 |    0 |    0 |
| not_placed |   538 |    0 |  117 |  158 |  148 |  101 |   14 |
| total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |
**** Total
 [[./images/weighted_random_anneal_satisfied_total.png]]
**** Category 1
 [[./images/weighted_random_anneal_satisfied_cat1.png]]
**** Category 2
 [[./images/weighted_random_anneal_satisfied_cat2.png]]
**** Category 3
 [[./images/weighted_random_anneal_satisfied_cat3.png]]
**** Category 4
 [[./images/weighted_random_anneal_satisfied_cat4.png]]
**** Category 5
 [[./images/weighted_random_anneal_satisfied_cat5.png]]
**** Category 6
 [[./images/weighted_random_anneal_satisfied_cat6.png]]
*** Everyone stacks
 [[./images/all_stack_anneal_satisfied.png]]
 |            | total | cat1 | cat2 | cat3 | cat4 | cat5 | cat6 |
 |------------+-------+------+------+------+------+------+------|
 | 1st        |    64 |   64 |    0 |    0 |    0 |    0 |    0 |
 | 2nd        |    71 |   71 |    0 |    0 |    0 |    0 |    0 |
 | 3rd        |    51 |   51 |    0 |    0 |    0 |    0 |    0 |
 | 4th        |    54 |   54 |    0 |    0 |    0 |    0 |    0 |
 | 5th        |    49 |   49 |    0 |    0 |    0 |    0 |    0 |
 | 6th        |    76 |   76 |    0 |    0 |    0 |    0 |    0 |
 | 7th        |   121 |  121 |    0 |    0 |    0 |    0 |    0 |
 | 8th        |    40 |   40 |    0 |    0 |    0 |    0 |    0 |
 | 9th        |   125 |  125 |    0 |    0 |    0 |    0 |    0 |
 | 10th       |    74 |   74 |    0 |    0 |    0 |    0 |    0 |
 | 11st       |    51 |   51 |    0 |    0 |    0 |    0 |    0 |
 | 12nd       |    68 |   68 |    0 |    0 |    0 |    0 |    0 |
 | 13rd       |    66 |   66 |    0 |    0 |    0 |    0 |    0 |
 | 14th       |    63 |    6 |   57 |    0 |    0 |    0 |    0 |
 | 15th       |    54 |    0 |   54 |    0 |    0 |    0 |    0 |
 | placed     |  1027 |  916 |  111 |    0 |    0 |    0 |    0 |
 | not_placed |   512 |    0 |   91 |  158 |  148 |  101 |   14 |
 | total      |  1539 |  916 |  202 |  158 |  148 |  101 |   14 |
**** Total
 [[./images/all_stack_anneal_satisfied_total.png]]
**** Category 1
 [[./images/all_stack_anneal_satisfied_cat1.png]]
**** Category 2
 [[./images/all_stack_anneal_satisfied_cat2.png]]
**** Category 3
 [[./images/all_stack_anneal_satisfied_cat3.png]]
**** Category 4
 [[./images/all_stack_anneal_satisfied_cat4.png]]
**** Category 5
 [[./images/all_stack_anneal_satisfied_cat5.png]]
**** Category 6
 [[./images/all_stack_anneal_satisfied_cat6.png]]
*** Everyone stacks but moves a random to first
 [[./images/all_stack_top_wt_random_anneal_satisfied.png]]
 ,total,cat1,cat2,cat3,cat4,cat5,cat6
1st,64,61,3,0,0,0,0
2nd,71,64,7,0,0,0,0
3rd,51,46,5,0,0,0,0
4th,54,47,7,0,0,0,0
5th,49,47,2,0,0,0,0
6th,76,68,8,0,0,0,0
7th,121,112,9,0,0,0,0
8th,40,38,2,0,0,0,0
9th,125,114,11,0,0,0,0
10th,74,66,8,0,0,0,0
11st,51,45,6,0,0,0,0
12nd,68,64,4,0,0,0,0
13rd,66,60,6,0,0,0,0
14th,35,32,3,0,0,0,0
15th,54,52,2,0,0,0,0
placed,999,916,83,0,0,0,0
not_placed,540,0,119,158,148,101,14
total,1539,916,202,158,148,101,14
**** Total
 [[./images/all_stack_top_wt_random_anneal_satisfied_total.png]]
**** Category 1
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat1.png]]
**** Category 2
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat2.png]]
**** Category 3
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat3.png]]
**** Category 4
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat4.png]]
**** Category 5
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat5.png]]
**** Category 6
 [[./images/all_stack_top_wt_random_anneal_satisfied_cat6.png]]
* Discussion
- In short, under each strategy:
  1. All random
     - Fairest gradation of ranks from top to bottom
     - Nobody actually selects like this IRL (unless you're a weirdo)
  2. All stack
     - It's basically communism for internships.
     - You have a near-equal chance at landing just about every
       hospital.
  3. All stack but put a random on top
     - Interestingly, you're most likely to get (in order) your first
       or 14th preference.
     - Proportionally, more people will be shafted to the bottom.
     - This appears to be most consistent with the strategy people use
       IRL.
  4. All stack but put a random at 1 and 14
     - Compared to 3, this slightly reduces your chance of getting
       your 1st preference.
     - Counterintuitively this also significantly reduces your chance
       of getting your 14th preference, instead you are more likely to
       get your 12th.
     - It's likely that any attempt to "beat" the algorithm in this
       manner will not work.
- Observations are similar with categorical and optimisation-based
  placement.
- Paradoxically, it does not always result in a net increase in
  happiness:

- It is also consistent with the following observations:
  - "The last 4 are the most important" - sort of. In strategy 3, a
    proportionally larger number of people are being shafted
    to the bottom.
  - "Stacking hurts your chances of getting to preferences 1-6"
    (HETI, 2020) - true wherever stacking is used.
- If this is indeed HETI's algorithm, satisfaction appears to be
  maximised under strategy 1 or 3
- As previously mentioned, there are a lot of deviations between this
  simulation and the actual data produced by HETI.
  - Not only do I not have all the information to make this simulation
    completely accurate, I did not factor in for all the other entry
    pathways and schemes.
* What should you do?
- Depends on what you want
- There is not enough data to draw any definitive conclusions on what
  the "best" strategy is, especially since a lot of simplifications
  were made to run this model
  - Strategy 3 gives you the best chance of getting your first
    preference. IRL it may break down for category 1 hospitals (RPA,
    RNS, POW, StV), but more data is needed to say for sure.
  - Strategy 2 is best if you don't care where you will end up, but
    given that IRL it is mostly a mix between strategies 2 and 3, this
    might not lead to the same result as in the simulation.
- Fork me, submit a pull request or an issue on [[https://github.com/newageoflight/stack_sim][Github]] to help me
  improve the simulation so future generations can know what to do
  with greater accuracy. There's probably a lot of higher-level
  math/CS knowledge that could be applied here that I don't know about.
* TODO Future directions/todos
- [ ] Significance analysis of results
- [ ] Further strategic analysis
- [ ] Fix the algorithm so it's more consistent with the real data
- [ ] Implement more scenarios e.g. some people stack, some people
  random
- [ ] Implement random Category 1 rejections and multiple rounds of
  offers so this simulation actually becomes useful for Categories 2-6
- [ ] More data is needed to make this more accurate e.g. how many
  people preference each hospital in what order every year?
- [ ] Is there any way to beat the algorithm beyond simply stacking
  e.g. preferencing at 1st and 14th, 1st and 12th, etc? If so, why
  does it work?
- [ ] GPU optimisation of simulated annealing so we can run HETI's
  "millions of iterations" at home
* Sources
- AMSA Internship Guide[fn:1] and HETI's Annual Report[fn:2]
- HETI's 2021 procedure[fn:3] (thanks Chris Chiu)
- 2019 Student Survey (available on my Github)
* Footnotes

[fn:3] https://www.heti.nsw.gov.au/__data/assets/pdf_file/0011/576470/Optimised-Allocation-Pathway-Procedure-for-2021-Clinical-Year.pdf 

[fn:2] https://www.heti.nsw.gov.au/__data/assets/pdf_file/0019/485002/Annual-Report-for-Medical-Graduate-Recruitment-for-the-2019-Clinical-Year.PDF 

[fn:1] https://www.amsa.org.au/sites/amsa.org.au/files/Internship%20Guide%202019%20Final.pdf

